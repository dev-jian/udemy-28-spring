====================================================================
[Spring Container]
- Spring Container는 Sprinb Bean과 그 Bean들의 LifeCycle를 관리한다.

- Spring Container는 Spring Context IOC Container라고도 불린다.

- Spring Container는 유명한 두 가지 타입이 있다
1. Bean Factory: Basic Spring Container
2. Application Context: Advanced Spring Container with enterprise-specific features
likes AOP, i18n, Web applications

- 대부분의 앱은 2번기능이 필요하므로 ApplicationContext를 많이 사용한다.
====================================================================
[Spring Bean]
- Any Java Object = POJO

- Java Bean = There are Three important restrictions
1. should have a no args constructor
2. should have getters and setters
3. should implements serializable

- Spring Bean = Every java object that is managed by spring container.

- Spring Bean의 목록을 확인하고 싶다면 Spring Container에 요청하면 된다. (.getBeanDefinitionNames())

- Bean 주입 시 같은 타입의 다른 빈들이 여러개 있다면 충돌이 나게된다. (multiple candidate beans) 이럴 때 해결법은 여러가지가 있다. 동시에 사용도 가능하다.
1. Bean 등록 시 대표 Bean에 @Primary를 붙인다.
=> 우선적으로 가져올 bean에 붙인다.
2. 주입이 이루어지는 파라미터에 @Qualifier를 붙인다.
=> 특정 bean을 가져오고 싶을 때 붙인다.

- @Component 를 이용해 해당 클래스를 Bean으로 등록 및 생성할 수 있다. (ComponentScan)

- 또한 @Component로 bean을 등록하려면 @ComponentScan으로 basePackages를 정해주어야 한다.

====================================================================
[Dependency Injection]

- 의존성을 주입하는 것(외부(Spring Container)에서 객체를 생성하고 그것을 주입하는 것)

- 세가지 방법이 있다.
1. 생성자 주입 (Constructor based Injection)
=> @Autowired를 붙이지 않아도 주입한다.
=> 해당 방법을 가장 추천한다. 왜 ? 하나의 메서드(생성자)안에서 모든 주입이 이루어지기 때문이다.

2. 게터/세터 주입 (Getter / Setter)

3. 필드 주입 (Field Injection)
=> 생성자나 게터 세터 없이 reflection을 이용하여 주입

- 이 모든 것을 Spring이 하기 때문에 IOC라고 한다. (Inversion of Control)

- @Component vs @Bean 차이 캡처 (2-1. @Component vs @Bean)