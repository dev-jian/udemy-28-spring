[Before Spring Boot]

- Spring Boot 이전에는 여러 의존성을 전부 추가해야했다. MVC, Databind, Log4j..

- web.xml에 dispatcherServlet 설정을 했어야 했다.

- ComponentScan, View Resolver, Data Source 등 스프링 관련 설정을 해야 했다.

- NFR(Non-Functional Requirements - ex. Logging, Error Handling, Monitoring..) 들을 구현해야 했다.

- Spring boot를 이용하면 이러한 설정들을 자동으로 해준다.

=====================================================
[Spring boot]

- 스프링 부트의 목표는 상용(Production-Ready) 앱을 빠르게(Quickly) 만드는 것이다. 이 두가지가 핵심/

-- Quick 
- Spring Initializr : 스프링 부트 프로젝트를 만들어준다.

- Spring Boot Starter Projects : 필요한 의존성들을 빠르게 정의해준다.

- Spring Boot Auto Configuration : classpath의 의존성들을 기반으로 자동설정을 해준다.

- Spring Dev tools : 서버 로직 변경 시 재기동하지 않아도 반영될 수 있도록 한다.

-- Production-Ready
- Logging
- Different Config for different Env. (such as dev, staging, productions..) by profile, configuration properties.
- monitoring (Spring Actuator)

========================================================
[Spring Boot Starter Projects]

- 앱 개발을 위해 많은 프레임워크 또는 라이브러리를 사용하게 된다.

- 어떻게 하면 이것들을 잘 묶어 사용하기 쉽도록 할 수 있을까 에서부터 시작되었다.

- starters: Convenient Dependency Descriptor for diff. feats.
-- Spring boot starter web, Spring boot Starter Test, Spring boot Starter Data JPA 등이 있다.

==============================================
[Spring auto configuration]

- Data Source, ComponentScan, DispatcherServlet, Json Conversion ..
이렇게 많은 설정들을 해야하는데 이걸 어떻게 단순화 할까 에서부터 시작되었다.

- classpath에 존재하는 프레임워크에 따라 자동설정을 해준다. 물론 해당 자동설정을 overriding 할 수 있다.
ex) Starter Web - dispatcherServlet, Tomcat ..

=================================================
[dev tools]
automatically restart the server로 인해 increase developers productivity.

======================================================
[Get Production-Ready With Spring boot]
- 애플리케이션은 각기 다른 환경을 가진다. ex) dev, qa, stage, prod...

- 이 다른 환경들은 다른 설정들이 필요하다. ex) dev용 datasource 설정 등..

- 그럼 각각 다른 환경들에 다른 설정을 제공하기 위해 어떻게 해야 할까 ??

- Spring은 이를 위해 profiles을 제공한다. its environment specific configuration.

- 프로필 마다 다른 설정을 하기 위해서는 application-{프로필명}.properties 식으로 설정을 해야한다.

- 이 때 application.properties 는 default 설정이 된다.

- @ConfigurationProperties를 클래스에 적용해 해당 클래스의 각 필드에 properties 파일에서 설정한 값들을 바인딩할 수 있다.

- 옛날에는 서버를 WAS 설치 후 WAR로 배포했다.

- 하지만 Spring Boot의 Embedded Server로 배포가 간단해졌다.

- Actuator를 이용해 앱의 상태를 모니터링할 수 있다.

- Spring Boot vs Spring vs Spring MVC 
=> Spring : Spring Framework는 Spring Projects 중 하나이며 Dependency Injection이 핵심이다. 또한 추가 기능은 Spring module과 projects로 확장할 수 있다.

=> Spring MVC : Spring Framework의 module 중 하나이다. Web Application과 Rest API 구축을 편리하게 해준다.

=> Spring Boot : SPring Projects 중 하나이며 빠르게 상용 수준의 앱을 만들 수 있도록 한다.

즉 Spring Boot는 Spring Framework를 좀 더 편리하고 빠르게 사용할 수 있도록 만들어진 프로젝트이며 Spring MVC 또한 스프링을 이용해 Web App을 빠르고 편리하게 만들 수 있도록 만들어진 모듈이므로 이들은 비교대상이 아니다.

 