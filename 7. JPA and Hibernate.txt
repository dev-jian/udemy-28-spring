[Launching H2 Console]
- spring.h2.console.enabled=true 설정으로 h2 console 이용가능하다.

- spring.datasource.url=jdbc:h2:mem:testdb 설정으로 h2 jdbc url을 고정으로 설정할 수 있다.

- spring boot를 이용하면 schema.sql파일을 resources 폴더에 만들어 앱 실행 시 자동으로 스키마 초기화(테이블 생성 등)를 할 수 있다.

==============
[JDBC]

- 일반 JDBC 코드를 쓰는 것 보다 Spring Data JDBC를 쓰는 것이 java 코드를 덜 쓸 수 있다.
- 쿼리는 똑같이 쓰지만 java 코드가 줄어든다. jdbcTemplate 이용

- CommandLineRunner 인터페이스를 구현하면 해당 빈의 run 메서드를 SpringApplication이 실행될 때 호출한다.
- 여러 개의 CommandLineRunner bean을 등록할 수 있고 순서를 지정할 수 있다.

- 쿼리에 ?로 작성된 부분은 매개변수를 이용해 데이터 바인딩이 가능하다.

- 하나의 결과만을 조회할 때 queryForObject 메서드를 이용할 수 있고, BeanPropertyRowMapper 객체를 이용해 해당 조회 결과 row를 해당 bean에 맵핑할 수 있다.

- BeanPropertyRowMapper로 맵핑 시 기본 생성자가 있어야 한다.

=============================================
[JPA]

- table과 java bean을 mapping 할 때 @Entity를 이용한다.

- table과 bean 이름이 다르다면 해당 table 명을 명시해주어야한다.

- column과 bean property 또한 이름이 다르다면 명시해주어야한다.

- jpa를 이용해 database와 통신하기 위해 entityManager를 이용해야 한다.

- entityManager를 주입할 때 @Autowired도 작동하지만, @PersistenceContext를 이용하는 것을 추천한다.

- entityManager를 이용해 insert할 때는 .merge 메서드를, select할 때는 .find 메서드를, delete 할 때는 .remove 메서드를 이용한다.

- entityManager를 이용해 작업할 때 @Transactional 이 꼭 필요하다.

- spring.jpa.show-sql=true 설정을 이용해 jpa가 생성하는 쿼리를 확인할 수 있다.

- spring data jpa를 이용하면 보일러 플레이트 코드를 많이 줄일 수 있다. ex. save(), findById(), deleteById() 등..

- spring data jpa를 사용하려면 repository 인터페이스에 JpaRepository<T, ID> 를 상속하고 @Repository를 붙인다.
=> T는 영속성 관리할 엔티티의 타입이며, ID는 해당 엔티티의 ID 필드 타입이다.
=> 또한 entityManager를 따로 주입받아 사용할 필요도 없다.

- 또한 특정 필드의 값에 따라 조회하고 싶을 경우 해당 interface에 네이밍 컨벤션을 이용해 메서드를 상세하면 자동으로 구현해준다.
ex. findByAuthor(String author) : 입력된 author의 값에 따라 조회

===========================================================
[Hibernate vs JPA]

- JPA는 상세를 서술한 것이다. its just an api.
=> 엔티티를 어떻게 정의할 것인지? (@Entity)
=> 각 속성을 어떻게 연결할 것인지? (@Id and @Column)

- Hibernate는 이 상세를 구현한 것 중 하나이다.